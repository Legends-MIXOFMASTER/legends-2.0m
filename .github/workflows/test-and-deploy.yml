name: Test and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test
  CI: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Run Linting
      run: npm run lint
    
    - name: Run Type Check
      run: npm run type-check
    
    - name: Run Tests
      run: |
        npm test
        npm run test:coverage
    
    - name: Upload Coverage
      if: github.repository == 'Legends-MIXOFMASTER/legends-2.0m'
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        files: ./coverage/lcov.info
        flags: unittests

  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Snyk to check for vulnerabilities
      if: github.repository == 'Legends-MIXOFMASTER/legends-2.0m'
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --severity-threshold=high
    
    - name: Run npm audit
      run: npm audit --audit-level=high || true

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-
    
    - name: Install Dependencies
      run: npm ci --production
    
    - name: Build Project
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Deploy to Vercel
      if: github.repository == 'Legends-MIXOFMASTER/legends-2.0m'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: .
        vercel-args: '--prod'
